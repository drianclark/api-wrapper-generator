{% macro pascalCase(s) -%}
    {{ s[0]|upper}}{{s[1:] -}}
{% endmacro -%}
def test{{ pascalCase(functionName) }}():
    data = r.{{functionName}}()

    {% if returnFormat == 'list' -%}
    assert all(isinstance(x, {{ returnType }}) for x in data)

    {% for propObject in requiredProps.items() %}
    assert all(x.{{propObject.attribute}}() != None for x in data)
    {%- if propObject.type == 'string' %}
    assert all(isinstance(x.{{propObject.attribute}}(), str) for x in data)       
    {%- endif -%}
    {%- if propObject.type == 'number' %}
    assert all(isinstance(x.{{propObject.attribute}}(), (int, float)) for x in data)       
    {%- endif -%}
    {%- if propObject.type == 'array' and propObject.content-type != 'object' %}
    for x in data.{{propObject.attribute}}:
        assert all(isinstance(y, {{propObject.content-type}}) for y in x)
    {% endif %}
    {%- if propObject.type == 'object' %}
    try:
        assert all(isinstance(x.{{propObject.attribute}}(), {{pascalCase(propObject.attribute)}}) for x in data)
    except NameError:
        assert all(isinstance(x.{{propObject.attribute}}(), dict) for x in data)
    {%- endif -%}
    {% endfor -%}
    {% else -%}
    assert isinstance(data, {{ returnType }})
    {% endif %}

    {% for propObject in optionalProps.items() %}
    try:
        dataWith{{propObject.attribute}} = r.{{functionName}}(exists=['{{propObject.attribute}}'], limit=1)[0]
        assert (dataWith{{propObject.attribute}}.{{propObject.attribute}}() != None)
        {%- if propObject.type == 'string' %}
        assert isinstance(dataWith{{propObject.attribute}}.{{propObject.attribute}}(), str)
        {%- endif %}
        {%- if propObject.type == 'number' %}
        assert isinstance(dataWith{{propObject.attribute}}.{{propObject.attribute}}(), (int, float)) 
        {%- endif %}
        {%- if propObject.type == 'array' and propObject.content-type != 'object' %}
        for x in data.{{propObject.attribute}}:
            assert all(isinstance(y, {{propObject.content-type}}) for y in x)
        {% endif %}
        {%- if propObject.type == 'object' %}
        try:
            assert all(isinstance(x.{{propObject.attribute}}(), {{pascalCase(propObject.attribute)}}) for x in data)
        except NameError:
            assert all(isinstance(x.{{propObject.attribute}}(), dict) for x in data)
        {%- endif -%}
        {%- if propObject.type == 'object' %}
        try:
            assert isinstance(dataWith{{propObject.attribute}}.{{propObject.attribute}}(), {{pascalCase(propObject.attribute)}}) 
        
        except NameError:
            assert isinstance(dataWith{{propObject.attribute}}.{{propObject.attribute}}(), dict) 
        {%- endif %}

    except IndexError:
        print('No data found with prop {{propObject.attribute}}')

    except ValueError:
        print('Invalid http request for prop {{propObject.attribute}}')

    {%- endfor -%}

    {%- for propObject in requiredNestedProps %}
    try:
        dataWith{{propObject.attribute}} = r.{{functionName}}(limit=1)[0]
        assert (dataWith{{propObject.attribute}}.{{propObject.accessor}} != None)
        {%- if propObject.type == 'string' %}
        assert isinstance(dataWith{{propObject.attribute}}.{{propObject.accessor}}, str)
        {% endif %}
        {%- if propObject.type == 'number' %}
        assert isinstance(dataWith{{propObject.attribute}}.{{propObject.accessor}}, (int, float)) 
        {% endif %}
        {%- if propObject.type == 'array' and propObject.content-type != 'object' %}
        for x in data.{{propObject.attribute}}:
            assert all(isinstance(y, {{propObject.content-type}}) for y in x)
        {% endif %}
        {%- if propObject.type == 'object' %}
        assert isinstance(dataWith{{propObject.attribute}}.{{propObject.accessor}}, {{propObject.class}}) 
        {% endif %}
    except IndexError:
        print('No data found with prop {{propObject.attribute}}')

    {%- endfor %}

    {%- for propObject in optionalNestedProps %}
    try:
        dataWith{{propObject.attribute}} = r.{{functionName}}(exists=['{{propObject.attribute}}'], limit=1)[0]
        assert (dataWith{{propObject.attribute}}.{{propObject.accessor}} != None)
        {%- if propObject.type == 'string' %}
        assert isinstance(dataWith{{propObject.attribute}}.{{propObject.accessor}}, str)
        {%- endif -%}
        {%- if propObject.type == 'number' %}
        assert isinstance(dataWith{{propObject.attribute}}.{{propObject.accessor}}, (int, float)) 
        {% endif %}
        {%- if propObject.type == 'array' and propObject.content-type != 'object' %}
        for x in data.{{propObject.attribute}}:
            assert all(isinstance(y, {{propObject.content-type}}) for y in x)
        {% endif %}
        {%- if propObject.type == 'object' %}
        assert isinstance(dataWith{{propObject.attribute}}.{{propObject.accessor}}, {{propObject.class}}) 
        {% endif %}
    except IndexError:
        print('No data found with prop {{propObject.attribute}}')

    except ValueError:
        print('Invalid http request for prop {{propObject.attribute}}')
    {% endfor %}
        