{% macro pascalCase(s) -%}
    {{ s[0]|upper}}{{s[1:] -}}
{% endmacro -%}
class {{ className }}:

    def __init__(self, dict):
        {% for objectAttribute in objectAttributes -%}
        from {{packageName}}.{{ pascalCase(objectAttribute[1]) }} import {{ pascalCase(objectAttribute[1]) }}
        {% endfor %}

        for k, v in dict.items():
            setattr(self, "_" + k, v)

        keys = list(dict.keys())

        try: 
            self._id = dict["@id"]
        except:
            pass
        {% for objectAttribute in objectAttributes %}
        if "{{ objectAttribute[0] }}" in keys:
            try: 
                self._{{ objectAttribute[0] }} = {{pascalCase(objectAttribute[1])}}(dict["{{objectAttribute[0]}}"])
            except AttributeError:
                self._{{ objectAttribute[0] }} = [{{pascalCase(objectAttribute[1])}}(x) for x in dict["{{objectAttribute[0]}}"]]
        {% endfor -%}
        
    {% for propertyObject in properties -%}
        {% for name, info in propertyObject.items() -%}
        {% if "$ref" in info %}
    def {{ name }}(self):
        try:
            value = self._{{ name  }}["@id"]
        except AttributeError:
            value = None

        return value
            {% else %}
    def {{ name }}(self):
        try:
            value = self._{{ name  }}
        except AttributeError:
            value = None

        return value
        {% endif %}
        {% endfor -%}
    {% endfor -%}